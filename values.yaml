## Container image settings.
## Since the image is unique for all microservices, so are image settings.

image:
  repository: grafana/metrics-enterprise
  tag: v1.0.2
  pullPolicy: IfNotPresent


  ## Optionally specify an array of imagePullSecrets.
  ## Secrets must be manually created in the namespace.
  ## ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  ##
  # pullSecrets:
  #   - myRegistrKeySecretName

ingress:
  enabled: true
  annotations:
    kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - /
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

serviceAccount:
  create: true
  name:
  annotations: {}

useExternalConfig: false
externalConfigSecretName: 'secret-with-config.yaml'
externalConfigVersion: '0'

config:
  auth_enabled: false

  admin_client:
    storage:
      type: s3

  ingester:
    max_transfer_retries: 0
    lifecycler:
      join_after: 0s
      final_sleep: 0s
      num_tokens: 512
      ring:
        replication_factor: 1
        kvstore:
          store: consul
          prefix: 'collectors/'
          consul:
            host: 'consul:8500'
            http_client_timeout: '20s'
            consistent_reads: true
  limits:
    enforce_metric_name: false
    reject_old_samples: true
    reject_old_samples_max_age: 168h

  server:
    http_listen_port: 8080
    grpc_listen_port: 9095
    grpc_server_max_recv_msg_size: 104857600
    grpc_server_max_send_msg_size: 104857600
    grpc_server_max_concurrent_streams: 1000

  ingester_client:
    grpc_client_config:
      max_recv_msg_size: 104857600
      max_send_msg_size: 104857600
      use_gzip_compression: true

  # See https://github.com/metrics-enterpriseproject/cortex/blob/master/docs/configuration/config-file-reference.md#storage_config
  storage:
    engine: blocks
  # This configures how the store-gateway synchronizes blocks stored in the bucket. It uses Minio by default for getting started but this should be changed for production deployments.
  blocks_storage:
    backend: s3

  distributor:
    shard_by_all_labels: true
    pool:
      health_check_ingesters: true
  querier:
    active_query_tracker_dir: /data/metrics-enterprise/querier
    query_ingesters_within: 12h
  query_range:
    split_queries_by_interval: 24h
    align_queries_with_step: true
    cache_results: true
    results_cache:
      cache:
        memcached:
          expiration: 1h
        memcached_client:
          timeout: 1s
  ruler:
    enable_alertmanager_discovery: false
  alertmanager:
    external_url: '/api/prom/alertmanager'
  frontend:
    #max_outstanding_per_tenant: 1000
    log_queries_longer_than: 10s
    compress_responses: true

rbac:
  create: true
  pspEnabled: true

admin_api:
  replicas: 1

  annotations: {}
  service:
    annotations: {}
    labels: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  podLabels: {}
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  securityContext: {}
  initContainers: []

  extraArgs: {}

  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 32Mi

  extraContainers: []
  extraVolumes: []
  nodeSelector: {}
  affinity: {}
  tolerations: []
  terminationGracePeriodSeconds: 60

alertmanager:
  replicas: 1

  statefulSet:
    ## If true, use a statefulset instead of a deployment for pod management.
    ## This is useful for using a persistent volume for storing silences between restarts
    ##
    enabled: false

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 32Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity: {}
  annotations: {}

  ## DEPRECATED: use persistentVolume.subPath instead
  persistence:
    subPath:

  persistentVolume:
    ## If true and alertmanager.statefulSet.enabled is true,
    ## Alertmanager will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Alertmanager data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## Alertmanager data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Alertmanager data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of Alertmanager data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''

    ## Alertmanager data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext:
    {}
    #fsGroup: 10001
    #runAsGroup: 10001
    #runAsNonRoot: true
    #runAsUser: 10001

  ## Tolerations for pod assignment
  ## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
  tolerations: []

  # The values to set in the PodDisruptionBudget spec
  # If not set then a PodDisruptionBudget will not be created
  podDisruptionBudget: {}
  # minAvailable: 1
  # maxUnavailable: 1

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  statefulStrategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 60

  initContainers: []
  ## Init containers to be added to the metrics-enterprise pod.
  # - name: my-init-container
  #   image: busybox:latest
  #   command: ['sh', '-c', 'echo hello']

  extraContainers: []
  ## Additional containers to be added to the metrics-enterprise pod.
  # - name: reverse-proxy
  #   image: angelbarrera92/basic-auth-reverse-proxy:dev
  #   args:
  #     - "serve"
  #     - "--upstream=http://localhost:3100"
  #     - "--auth-config=/etc/reverse-proxy-conf/authn.yaml"
  #   ports:
  #     - name: http
  #       containerPort: 11811
  #       protocol: TCP
  #   volumeMounts:
  #     - name: reverse-proxy-auth-config
  #       mountPath: /etc/reverse-proxy-conf

  extraVolumes: []
  ## Additional volumes to the metrics-enterprise pod.
  # - name: reverse-proxy-auth-config
  #   secret:
  #     secretName: reverse-proxy-auth-config

  ## Extra volume mounts that will be added to the metrics-enterprise container
  extraVolumeMounts: []

  extraPorts: []
  ## Additional ports to the metrics-enterprise services. Useful to expose extra container ports.
  # - port: 11811
  #   protocol: TCP
  #   name: http
  #   targetPort: http

  # Extra env variables to pass to the metrics-enterprise container
  env: []

bootstrap:
  extraArgs: {}

distributor:
  replicas: 2

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - distributor
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 60

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

ingester:
  replicas: 3

  statefulSet:
    ## If true, use a statefulset instead of a deployment for pod management.
    ## This is useful when using WAL
    ##
    enabled: false

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - ingester
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  ## DEPRECATED: use persistentVolume.subPath instead
  persistence:
    subPath:

  persistentVolume:
    ## If true and ingester.statefulSet.enabled is true,
    ## Ingester will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Ingester data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## Ingester data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Ingester data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of Ingester data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''


    ## Ingester data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    failureThreshold: 20 # 10 minutes failure threshold
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 180
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
  statefulStrategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 240

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

ruler:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 32Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity: {}
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

querier:
  replicas: 2

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 128Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - querier
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

query_frontend:
  replicas: 2

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 256Mi
    requests:
      cpu: 10m
      memory: 32Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - query-frontend
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

table_manager:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 10m
      memory: 32Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity: {}
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

configs:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 10m
      memory: 32Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity: {}
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 45

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 180

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

nginx:
  enabled: true
  replicas: 2
  http_listen_port: 80
  config:
    dnsResolver: kube-dns.kube-system.svc.cluster.local
  image:
    repository: nginx
    tag: 1.17
    pullPolicy: IfNotPresent

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 100m
      memory: 128Mi
    requests:
      cpu: 10m
      memory: 16Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: ''
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity: {}
  annotations: {}
  persistence:
    subPath:

  livenessProbe:
    httpGet:
      path: /healthz
      port: http-metrics
    initialDelaySeconds: 10
  readinessProbe:
    httpGet:
      path: /healthz
      port: http-metrics
    initialDelaySeconds: 10

  securityContext: {}

  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1

  terminationGracePeriodSeconds: 10

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

store_gateway:
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - store-gateway
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  persistentVolume:
    ## If true Store-gateway will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## Store-gateway data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## Store-gateway data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## Store-gateway data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of Store-gateway data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''


    ## Store-gateway data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    failureThreshold: 20 # 10 minutes failure threshold
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 180
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60

  securityContext: {}

  strategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 240

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

compactor:
  enabled: true
  replicas: 1

  service:
    annotations: {}
    labels: {}

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 100m
      memory: 512Mi

  ## Additional Grafana Metrics Enterprise container arguments, e.g. log level (debug, info, warn, error)
  extraArgs:
    {}
    # log.level: debug

  ## Pod Labels
  podLabels: {}

  ## Pod Annotations
  podAnnotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: 'http-metrics'

  nodeSelector: {}
  affinity:
    podAntiAffinity:
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchExpressions:
                - key: target
                  operator: In
                  values:
                    - compactor
            topologyKey: 'kubernetes.io/hostname'

  annotations: {}

  persistentVolume:
    ## If true compactor will create/use a Persistent Volume Claim
    ## If false, use emptyDir
    ##
    enabled: true

    ## compactor data Persistent Volume Claim annotations
    ##
    annotations: {}

    ## compactor data Persistent Volume access modes
    ## Must match those of existing PV or dynamic provisioner
    ## Ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
    ##
    accessModes:
      - ReadWriteOnce

    ## compactor data Persistent Volume size
    ##
    size: 2Gi

    ## Subdirectory of compactor data Persistent Volume to mount
    ## Useful if the volume's root directory is not empty
    ##
    subPath: ''


    ## compactor data Persistent Volume Storage Class
    ## If defined, storageClassName: <storageClass>
    ## If set to "-", storageClassName: "", which disables dynamic provisioning
    ## If undefined (the default) or set to null, no storageClassName spec is
    ##   set, choosing the default provisioner.  (gp2 on AWS, standard on
    ##   GKE, AWS & OpenStack)
    ##
    # storageClass: "-"

  livenessProbe:
    failureThreshold: 20 # 10 minutes failure threshold
    httpGet:
      path: /ready
      port: http-metrics
      scheme: HTTP
    initialDelaySeconds: 180
    periodSeconds: 30
    successThreshold: 1
    timeoutSeconds: 1
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 60

  securityContext: {}

  strategy:
    type: RollingUpdate

  terminationGracePeriodSeconds: 240

  tolerations: []
  podDisruptionBudget: {}
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []
  extraPorts: []
  env: []

# Blocks/chunks chunk cache.
memcached:
  enabled: true
  replicaCount: 2
  pdbMinAvailable: 1
  memcached:
    maxItemMemory: 3840
    extraArgs:
      - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: {}
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "metrics-enterprise-memcached"
  #   effect: "NoSchedule"
  #affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - metrics-enterprise-memcached

# Blocks/chunks index read cache.
memcached-index-read:
  enabled: true
  replicaCount: 2
  #pdbMinAvailable: 1
  #image: memcached:1.5.7-alpine
  memcached:
    maxItemMemory: 3840
    extraArgs:
      - -I 32m
    threads: 32
  resources:
    requests:
      memory: 1Gi
      cpu: 10m
    limits:
      memory: 4Gi
      cpu: 1
  metrics:
    enabled: true
  #tolerations: []
  # - key: "dedicated"
  #   operator: "Equal"
  #   value: "metrics-enterprise-memcached"
  #   effect: "NoSchedule"
  #affinity: {}
  #   nodeAffinity:
  #     requiredDuringSchedulingIgnoredDuringExecution:
  #         nodeSelectorTerms:
  #         - matchExpressions:
  #           - key: dedicated
  #             operator: In
  #             values:
  #             - metrics-enterprise-memcached

# Blocks metadata cache.
# https://cortexmetrics.io/docs/blocks-storage/querier/#metadata-cache.
memcached-metadata:
  enabled: true
  replicaCount: 2
  memcached:
    maxIteMmemory: 1
    extraArgs:
      - -m 512
      - -I 32m
    threads: 32
  resources:
    requests:
      memory: 540Mi # A little over the memcached configured limit (-m).
      cpu: 10m
    limits:
      memory: 810Mi # 1.5 * memory request
      cpu: 1
  metrics:
    enabled: true

configsdb_postgresql:
  enabled: false
  uri:
  auth:
    password:
    existing_secret:
      name:
      key:

minio:
  enabled: true
  accessKey: metrics-enterprise
  secretKey: supersecret
  buckets:
    - name: metrics-enterprise-tsdb
    - name: metrics-enterprise-admin
